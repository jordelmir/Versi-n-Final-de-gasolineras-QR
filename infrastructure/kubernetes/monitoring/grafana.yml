# Grafana Visualization Dashboard Deployment for Kubernetes
# Comprehensive monitoring dashboards and alerting interface

apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: gasolinera-jsm
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/part-of: gasolinera-jsm-platform
    app.kubernetes.io/version: "10.2"
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana
      app.kubernetes.io/component: monitoring
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grafana
        app.kubernetes.io/component: monitoring
        app.kubernetes.io/part-of: gasolinera-jsm-platform
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 472
        fsGroup: 472
      initContainers:
      - name: grafana-init
        image: grafana/grafana:10.2.2
        command:
        - /bin/sh
        - -c
        - |
          set -e
          echo "Initializing Grafana configuration..."

          # Create necessary directories
          mkdir -p /var/lib/grafana/dashboards
          mkdir -p /var/lib/grafana/plugins

          # Set proper permissions
          chown -R 472:472 /var/lib/grafana

          echo "Grafana initialization completed"
        volumeMounts:
        - name: grafana-data
          mountPath: /var/lib/grafana
        securityContext:
          runAsUser: 0  # Need root for chown
        resources:
          requests:
            memory: 64Mi
            cpu: 50m
          limits:
            memory: 128Mi
            cpu: 100m
      containers:
      - name: grafana
        image: grafana/grafana:10.2.2
        ports:
        - containerPort: 3000
          name: grafana
        env:
        - name: GF_SECURITY_ADMIN_USER
          value: "admin"
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-credentials
              key: GF_SECURITY_ADMIN_PASSWORD
        - name: GF_INSTALL_PLUGINS
          value: "grafana-piechart-panel,grafana-worldmap-panel,grafana-clock-panel"
        - name: GF_PATHS_DATA
          value: "/var/lib/grafana"
        - name: GF_PATHS_LOGS
          value: "/var/log/grafana"
        - name: GF_PATHS_PLUGINS
          value: "/var/lib/grafana/plugins"
        - name: GF_PATHS_PROVISIONING
          value: "/etc/grafana/provisioning"
        - name: GF_SERVER_PROTOCOL
          value: "http"
        - name: GF_SERVER_HTTP_PORT
          value: "3000"
        - name: GF_DATABASE_TYPE
          value: "postgres"
        - name: GF_DATABASE_HOST
          value: "postgres-primary:5432"
        - name: GF_DATABASE_NAME
          value: "grafana"
        - name: GF_DATABASE_USER
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: POSTGRES_USER
        - name: GF_DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: POSTGRES_PASSWORD
        - name: GF_SESSION_PROVIDER
          value: "redis"
        - name: GF_SESSION_PROVIDER_CONFIG
          value: "addr=redis-primary:6379,pool_size=100,db=grafana"
        - name: GF_ANALYTICS_REPORTING_ENABLED
          value: "false"
        - name: GF_ANALYTICS_CHECK_FOR_UPDATES
          value: "false"
        - name: GF_LOG_MODE
          value: "console"
        - name: GF_LOG_LEVEL
          value: "info"
        volumeMounts:
        - name: grafana-data
          mountPath: /var/lib/grafana
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
        - name: grafana-dashboards-config
          mountPath: /etc/grafana/provisioning/dashboards
        - name: grafana-dashboards
          mountPath: /var/lib/grafana/dashboards
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        resources:
          requests:
            memory: 256Mi
            cpu: 100m
          limits:
            memory: 512Mi
            cpu: 500m
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 472
          capabilities:
            drop:
            - ALL
      volumes:
      - name: grafana-data
        persistentVolumeClaim:
          claimName: grafana-pvc
      - name: grafana-datasources
        configMap:
          name: grafana-datasources
      - name: grafana-dashboards-config
        configMap:
          name: grafana-dashboards-config
      - name: grafana-dashboards
        configMap:
          name: grafana-dashboards
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
---
# Grafana Service
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: gasolinera-jsm
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/part-of: gasolinera-jsm-platform
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3000"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: 3000
    protocol: TCP
    name: grafana
  selector:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: monitoring
---
# Grafana Dashboards Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards-config
  namespace: gasolinera-jsm
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: monitoring
data:
  dashboards.yml: |
    apiVersion: 1

    providers:
      - name: 'gasolinera-dashboards'
        orgId: 1
        folder: 'Gasolinera JSM'
        type: file
        disableDeletion: false
        updateIntervalSeconds: 10
        allowUiUpdates: true
        options:
          path: /var/lib/grafana/dashboards
---
# Grafana Dashboards
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: gasolinera-jsm
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: monitoring
data:
  gasolinera-overview.json: |
    {
      "dashboard": {
        "id": null,
        "title": "Gasolinera JSM - Platform Overview",
        "tags": ["gasolinera", "overview"],
        "style": "dark",
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "System Overview",
            "type": "stat",
            "targets": [
              {
                "expr": "up{job=~\"gasolinera.*\"}",
                "legendFormat": "Services Up"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 0}
          },
          {
            "id": 2,
            "title": "Request Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(http_server_requests_seconds_count[5m])",
                "legendFormat": "{{service}} - {{uri}}"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 0}
          },
          {
            "id": 3,
            "title": "Response Time (95th percentile)",
            "type": "graph",
            "targets": [
              {
                "expr": "histogram_quantile(0.95, rate(http_server_requests_seconds_bucket[5m]))",
                "legendFormat": "{{service}} - {{uri}}"
              }
            ],
            "gridPos": {"h": 8, "w": 24, "x": 0, "y": 8}
          },
          {
            "id": 4,
            "title": "Database Connections",
            "type": "graph",
            "targets": [
              {
                "expr": "hikaricp_connections_active",
                "legendFormat": "Active - {{pool}}"
              },
              {
                "expr": "hikaricp_connections_idle",
                "legendFormat": "Idle - {{pool}}"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 16}
          },
          {
            "id": 5,
            "title": "Redis Memory Usage",
            "type": "graph",
            "targets": [
              {
                "expr": "redis_memory_used_bytes",
                "legendFormat": "Used Memory"
              },
              {
                "expr": "redis_memory_max_bytes",
                "legendFormat": "Max Memory"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 16}
          }
        ],
        "time": {"from": "now-1h", "to": "now"},
        "refresh": "30s"
      }
    }

  kubernetes-cluster.json: |
    {
      "dashboard": {
        "id": null,
        "title": "Kubernetes Cluster Monitoring",
        "tags": ["kubernetes", "cluster"],
        "style": "dark",
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "Cluster CPU Usage",
            "type": "graph",
            "targets": [
              {
                "expr": "100 - (avg by(instance) (irate(node_cpu_seconds_total{mode=\"idle\"}[5m])) * 100)",
                "legendFormat": "{{instance}}"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 0}
          },
          {
            "id": 2,
            "title": "Cluster Memory Usage",
            "type": "graph",
            "targets": [
              {
                "expr": "(1 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes)) * 100",
                "legendFormat": "{{instance}}"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 0}
          },
          {
            "id": 3,
            "title": "Pod Status",
            "type": "stat",
            "targets": [
              {
                "expr": "kube_pod_status_phase{namespace=\"gasolinera-jsm\"}",
                "legendFormat": "{{phase}}"
              }
            ],
            "gridPos": {"h": 8, "w": 24, "x": 0, "y": 8}
          }
        ],
        "time": {"from": "now-1h", "to": "now"},
        "refresh": "30s"
      }
    }